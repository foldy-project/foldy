// Code generated by oto; DO NOT EDIT.
pub use crate::types::*;
use reqwest;
use serde_json;

pub struct BackendBlockingClient {
    client: reqwest::blocking::Client,

    run_endpoint: String,

    test_endpoint: String,
}

impl BackendBlockingClient {
    pub fn new(endpoint: String) -> Self {
        let run_endpoint = format!("{}/oto/Backend.Run", &endpoint);

        let test_endpoint = format!("{}/oto/Backend.Test", &endpoint);

        BackendBlockingClient {
            client: reqwest::blocking::Client::new(),

            run_endpoint,

            test_endpoint,
        }
    }
}

impl Backend for BackendBlockingClient {
    fn run(&self, req: RunRequest) -> Result<RunResponse, String> {
        let body = match serde_json::to_string(&req) {
            Ok(body) => body,
            Err(e) => return Err(format!("{:?}", e)),
        };
        let resp: reqwest::blocking::Response = match self
            .client
            .post(&self.run_endpoint)
            .body(reqwest::blocking::Body::from(body))
            .send()
        {
            Ok(resp) => resp,
            Err(e) => return Err(format!("{:?}", e)),
        };
        let status = resp.status();
        let text = match resp.text() {
            Ok(value) => value,
            Err(e) => return Err(format!("{:?}", e)),
        };
        let mut obj = match serde_json::from_str::<RunResponse>(&text) {
            Ok(value) => value,
            Err(e) => return Err(format!("{:?}", e)),
        };
        if status == 200 {
            Ok(obj)
        } else {
            match obj.take_error() {
                Some(msg) => Err(msg),
                None => Err(format!("status code {}", status)),
            }
        }
    }

    fn test(&self, req: TestRequest) -> Result<TestResponse, String> {
        let body = match serde_json::to_string(&req) {
            Ok(body) => body,
            Err(e) => return Err(format!("{:?}", e)),
        };
        let resp: reqwest::blocking::Response = match self
            .client
            .post(&self.test_endpoint)
            .body(reqwest::blocking::Body::from(body))
            .send()
        {
            Ok(resp) => resp,
            Err(e) => return Err(format!("{:?}", e)),
        };
        let status = resp.status();
        let text = match resp.text() {
            Ok(value) => value,
            Err(e) => return Err(format!("{:?}", e)),
        };
        let mut obj = match serde_json::from_str::<TestResponse>(&text) {
            Ok(value) => value,
            Err(e) => return Err(format!("{:?}", e)),
        };
        if status == 200 {
            Ok(obj)
        } else {
            match obj.take_error() {
                Some(msg) => Err(msg),
                None => Err(format!("status code {}", status)),
            }
        }
    }
}
